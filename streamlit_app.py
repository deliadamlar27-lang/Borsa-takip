import streamlit as st
import pandas as pd
import yfinance as yf
import requests
from datetime import date, timedelta

def yahoo_finance_multi_symbol_search(query: str, limit=50):
    url = f"https://query2.finance.yahoo.com/v1/finance/search?q={query}"
    try:
        resp = requests.get(url, timeout=10)
        data = resp.json()
        results = []
        for item in data.get("quotes", []):
            if item.get("quoteType") in ["EQUITY", "ETF"]:
                results.append({
                    "symbol": item.get("symbol"),
                    "shortname": item.get("shortname", ""),
                    "exchange": item.get("exchange", ""),
                    "type": item.get("quoteType", ""),
                    "score": item.get("score", 0)
                })
            if len(results) >= limit:
                break
        return results
    except Exception as e:
        return []

def parse_tickers(tickers):
    return [t.strip().upper() for t in tickers if t.strip()]

@st.cache_data(ttl=3600)
def fetch_monthly_data(ticker, start_dt, end_dt):
    df = yf.download(ticker, start=start_dt, end=end_dt + timedelta(days=1), interval="1mo", progress=False)
    if not df.empty:
        df.index = pd.to_datetime(df.index)
        df = df.rename(columns={"Close": "KapanÄ±ÅŸ"})
        df = df[["KapanÄ±ÅŸ"]]
    return df

def calc_monthly_changes(df):
    if df.empty or len(df) < 2:
        return pd.DataFrame()
    df = df.sort_index()
    df["Ay"] = df.index.strftime("%Y-%m")
    df["AylÄ±k DeÄŸiÅŸim (%)"] = df["KapanÄ±ÅŸ"].pct_change().multiply(100).round(2)
    return df[["Ay", "KapanÄ±ÅŸ", "AylÄ±k DeÄŸiÅŸim (%)"]].dropna()

st.set_page_config(page_title="KÄ±saltma Listesi ve Takip", page_icon="ğŸ“ˆ", layout="wide")
st.title("ğŸ“ˆ TÃ¼m DÃ¼nya Hisse/ETF KÄ±saltmalarÄ± Listesi ve Takip")

# Session state: seÃ§ili semboller ve arama sonuÃ§larÄ±
if "selected_symbols" not in st.session_state:
    st.session_state.selected_symbols = []
if "symbol_search_results" not in st.session_state:
    st.session_state.symbol_search_results = []

with st.sidebar:
    st.subheader("DÃ¼nya Ã§apÄ±nda sembol ara ve yÃ¶net")
    search_query = st.text_input("Anahtar kelime ile sembol ara (Ã¶rn: apple, bank, istanbul, tesla, germany, etf, vs.)", key="search_query")
    search_limit = st.number_input("GÃ¶sterilecek maksimum sembol sayÄ±sÄ± (Ã¶rn: 50)", min_value=5, max_value=100, value=30, step=1)

    # GÃ¼ncelle butonu ile arama sonuÃ§larÄ± yenilenir
    if st.button("ğŸ”„ GÃ¼ncelle / Yenile", key="update_search"):
        if search_query:
            st.session_state.symbol_search_results = yahoo_finance_multi_symbol_search(search_query, search_limit)
        else:
            st.session_state.symbol_search_results = []
    
    # Arama sonuÃ§larÄ±nÄ± gÃ¶ster ve sembol ekleme/Ã§Ä±karma imkanÄ± ver
    if st.session_state.symbol_search_results:
        st.write(f"**{search_query}** iÃ§in bulunan semboller:")
        for item in st.session_state.symbol_search_results:
            symbol = item['symbol']
            label = f"{symbol} | {item['shortname']} | {item['exchange']} | {item['type']}"
            # Ekli ise Ã§Ä±kar butonu, ekli deÄŸilse ekle butonu
            cols = st.columns([5,1])
            with cols[0]:
                st.write(label)
            with cols[1]:
                if symbol in st.session_state.selected_symbols:
                    if st.button(f"Ã‡Ä±kar ({symbol})", key=f"remove_{symbol}"):
                        st.session_state.selected_symbols.remove(symbol)
                else:
                    if st.button(f"Ekle ({symbol})", key=f"add_{symbol}"):
                        st.session_state.selected_symbols.append(symbol)
    else:
        st.info("Yeni sembol aramasÄ± iÃ§in anahtar kelime girip 'GÃ¼ncelle / Yenile' butonuna basÄ±n.")

    st.markdown("---")
    st.subheader("Takip Listeniz")
    if st.session_state.selected_symbols:
        st.write(", ".join(st.session_state.selected_symbols))
    else:
        st.info("HenÃ¼z bir sembol eklemediniz.")
    st.markdown("---")
    start_dt = st.date_input("BaÅŸlangÄ±Ã§", value=date.today() - timedelta(days=365))
    end_dt = st.date_input("BitiÅŸ", value=date.today())
    run = st.button("Verileri Getir", type="primary")

# SeÃ§ili sembollerin verileri
tickers = st.session_state.selected_symbols

if run:
    if not tickers:
        st.warning("Takip listeniz boÅŸ. LÃ¼tfen en az bir sembol ekleyin.")
    elif start_dt >= end_dt:
        st.error("BaÅŸlangÄ±Ã§ tarihi bitiÅŸ tarihinden Ã¶nce olmalÄ±!")
    else:
        st.subheader("SeÃ§ilen Sembollerin SonuÃ§larÄ±")
        for t in tickers:
            st.markdown(f"### {t}")
            try:
                df = fetch_monthly_data(t, start_dt, end_dt)
                changes = calc_monthly_changes(df)
                if not changes.empty:
                    st.dataframe(changes, use_container_width=True)
                else:
                    st.info("Yeterli veri yok, lÃ¼tfen tarih aralÄ±ÄŸÄ±nÄ± geniÅŸletin veya baÅŸka sembol deneyin.")
            except Exception as e:
                st.error(f"Veri Ã§ekme hatasÄ±: {e}")

st.caption(
    "Veriler Yahoo Finance'dan aylÄ±k olarak Ã§ekilir. Sadece kapanÄ±ÅŸ fiyatÄ± ve aylÄ±k deÄŸiÅŸim yÃ¼zdesi gÃ¶sterilir. "
    "Sembol arama iÅŸlemi Yahoo Finance arama API'si ile yapÄ±lÄ±r. Takip listenizdeki sembollerin verilerini topluca gÃ¶rebilirsiniz."
)
