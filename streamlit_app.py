streamlit_app.py

import io import math from datetime import date, timedelta from typing import List, Dict

import numpy as np import pandas as pd import yfinance as yf import streamlit as st

st.set_page_config(page_title="KÃ¼resel Borsa Takip", layout="wide")

-------------------- YardÄ±mcÄ±lar --------------------

@st.cache_data(show_spinner=False) def load_prices(tickers: List[str], start: date, end: date, interval: str) -> pd.DataFrame: """Tickers -> Ã‡oklu sÃ¼tun (Close, Open, High, Low, Volume) DataFrame dÃ¶ndÃ¼rÃ¼r.""" df = yf.download( tickers=tickers, start=start, end=end + timedelta(days=1),  # end dahil olsun diye +1 interval=interval, auto_adjust=False, group_by="ticker", threads=True, progress=False, ) # yfinance farklÄ± ÅŸekillerde dÃ¶nebilir; normalize edelim if isinstance(df.columns, pd.MultiIndex): # Ã‡oklu ticker return df else: # Tek ticker -> Ã§oklu index oluÅŸtur df = pd.concat({tickers[0]: df}, axis=1) return df

def compute_indicators(px: pd.DataFrame, close_col: str = "Close") -> pd.DataFrame: """KapanÄ±ÅŸ fiyatÄ±ndan temel indikatÃ¶rleri hesaplar.""" s = px[close_col].copy() out = pd.DataFrame(index=px.index) out["Close"] = s # GÃ¼nlÃ¼k/periodik getiri out["Return"] = s.pct_change() out["CumReturn"] = (1 + out["Return"]).cumprod() - 1 # Basit hareketli ortalama out["SMA20"] = s.rolling(20).mean() out["SMA50"] = s.rolling(50).mean() # Ãœstel hareketli ortalama out["EMA20"] = s.ewm(span=20, adjust=False).mean() # Volatilite (yÄ±llÄ±k varsayÄ±msal) â€“ dÃ¶nemsel std * sqrt(252) out["Volatility"] = out["Return"].rolling(20).std() * math.sqrt(252) # RSI(14) delta = s.diff() up = np.where(delta > 0, delta, 0.0) down = np.where(delta < 0, -delta, 0.0) roll_up = pd.Series(up, index=s.index).rolling(14).mean() roll_down = pd.Series(down, index=s.index).rolling(14).mean() rs = roll_up / roll_down out["RSI14"] = 100 - (100 / (1 + rs)) # Bollinger(20, 2) ma20 = s.rolling(20).mean() std20 = s.rolling(20).std() out["BB_MA20"] = ma20 out["BB_Upper"] = ma20 + 2 * std20 out["BB_Lower"] = ma20 - 2 * std20 return out

def filter_columns(df: pd.DataFrame, selected: List[str]) -> pd.DataFrame: keep = [c for c in df.columns if c in selected] return df[keep]

def build_excel(prices: pd.DataFrame, selections: Dict[str, List[str]]) -> bytes: """Her ticker iÃ§in ayrÄ± sayfa + Ã–zet sayfasÄ± ile bir Excel dosyasÄ± Ã¼retir.""" output = io.BytesIO() with pd.ExcelWriter(output, engine="xlsxwriter") as writer: summary_rows = [] # Ã‡oklu index: (Field, Ticker) veya (Ticker, Field) olabilir; normalize edelim # Beklenen: prices[ticker][field] for ticker in selections.keys(): if ticker not in prices.columns.get_level_values(0): continue df_t = prices[ticker].copy() # Ä°ndikatÃ¶r seti ind = compute_indicators(df_t) # BirleÅŸtir (OHLCV + ind) merged = df_t.join(ind, how="left") # SeÃ§ime gÃ¶re filtrele cols = selections[ticker] if cols: merged = filter_columns(merged, cols) merged.to_excel(writer, sheet_name=ticker[:31]) # Ã–zet satÄ±rÄ± (son deÄŸerler) last = merged.dropna().iloc[-1:] if not last.empty: row = { "Ticker": ticker, "LastClose": float(last.get("Close", pd.Series([np.nan])).values[0]) if "Close" in last.columns else np.nan, "CumReturn": float(last.get("CumReturn", pd.Series([np.nan])).values[0]) if "CumReturn" in last.columns else np.nan, "Volatility": float(last.get("Volatility", pd.Series([np.nan])).values[0]) if "Volatility" in last.columns else np.nan, "RSI14": float(last.get("RSI14", pd.Series([np.nan])).values[0]) if "RSI14" in last.columns else np.nan, } summary_rows.append(row) # Summary if summary_rows: pd.DataFrame(summary_rows).to_excel(writer, sheet_name="Summary", index=False) return output.getvalue()

-------------------- UI --------------------

st.title("ğŸ“ˆ KÃ¼resel Borsa Takip UygulamasÄ±") st.caption( "DÃ¼nya borsalarÄ±ndan hisseleri takip edin, istediÄŸiniz aralÄ±kta indikatÃ¶rleri hesaplayÄ±n ve Excel olarak indirin." )

with st.sidebar: st.header("Ayarlar") tickers_raw = st.text_area( "Ticker listesi (virgÃ¼lle ayÄ±rÄ±n)", help=( "Ã–rnekler: AAPL, MSFT, TSLA (NASDAQ); 7203.T (TSE); RACE.MI (Borsa Italiana); " "BIST iÃ§in Ã¶rn: THYAO.IS, ASELS.IS. Endeksler iÃ§in ^XU100, ^GSPC gibi." ), placeholder="AAPL, MSFT, THYAO.IS, ^XU100", ) c1, c2 = st.columns(2) with c1: start_date = st.date_input("BaÅŸlangÄ±Ã§", value=date.today() - timedelta(days=365)) with c2: end_date = st.date_input("BitiÅŸ", value=date.today())

interval = st.selectbox(
    "Veri aralÄ±ÄŸÄ± (interval)",
    options=["1d", "1wk", "1mo", "1h", "30m", "15m", "5m", "1m"],
    index=0,
    help="DakikalÄ±k aralÄ±klar iÃ§in son 30 gÃ¼n sÄ±nÄ±rÄ± olabilir.",
)

st.markdown("---")
st.subheader("Excel'e Dahil Edilecek SÃ¼tunlar")
default_cols = [
    "Open",
    "High",
    "Low",
    "Close",
    "Volume",
    "Return",
    "CumReturn",
    "SMA20",
    "SMA50",
    "EMA20",
    "Volatility",
    "RSI14",
    "BB_MA20",
    "BB_Upper",
    "BB_Lower",
]
chosen_cols = st.multiselect(
    "SeÃ§iniz",
    options=default_cols,
    default=["Close", "Return", "CumReturn", "SMA20", "RSI14", "Volatility"],
)

st.markdown("---")
st.caption(
    "Ä°pucu: FarklÄ± borsalardaki hisseleri aynÄ± listede takip edebilirsiniz. DoÄŸru ticker yazÄ±mÄ± iÃ§in ilgili borsa soneki kullanÄ±n (Ã¶rn. BIST: .IS)."
)

Ana alan

if tickers_raw: tickers = [t.strip() for t in tickers_raw.split(",") if t.strip()] try: data = load_prices(tickers, start_date, end_date, interval) except Exception as e: st.error(f"Veri indirilirken hata oluÅŸtu: {e}") st.stop()

# Ã–nizleme sekmeleri
tabs = st.tabs([f"ğŸ“Š {t}" for t in tickers])
for t, tab in zip(tickers, tabs):
    with tab:
        if t in data.columns.get_level_values(0):
            df_t = data[t].copy()
            ind = compute_indicators(df_t)
            merged = df_t.join(ind, how="left")
            st.dataframe(merged.tail(200), use_container_width=True)
            # Basit grafik
            st.line_chart(merged[["Close", "SMA20", "SMA50"]].dropna())
        else:
            st.warning(f"{t} iÃ§in veri bulunamadÄ±.")

# Excel oluÅŸturma
selections = {t: chosen_cols for t in tickers}
excel_bytes = build_excel(data, selections)
st.download_button(
    label="ğŸ“¥ Excel Olarak Ä°ndir",
    data=excel_bytes,
    file_name="borsa_takip.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
)

else: st.info("BaÅŸlamak iÃ§in sol taraftan en az bir ticker girin.")

-------------------- Alt Bilgi --------------------

st.markdown( """ Notlar
- Veri kaynaÄŸÄ±: Yahoo Finance (yfinance). TÃ¼m dÃ¼nya borsalarÄ±nÄ±n bÃ¼yÃ¼k bir kÄ±smÄ±nÄ± destekler.
- Ä°nterval kÄ±sÄ±tlarÄ±: 1m/5m gibi dakikalÄ±k verilerde Yahoo sÄ±nÄ±rlamalarÄ± olabilir.
- Ä°hracat dosyasÄ±: Her hisse iÃ§in ayrÄ± bir Excel sayfasÄ± ve "Summary" sayfasÄ± iÃ§erir.
- Ä°statistikler: SMA/EMA, RSI, Bollinger, volatilite, getiriler dahil.
- GeliÅŸtirme: Ä°sterseniz ek indikatÃ¶rler, alarm/uyarÄ±lar, canlÄ± veri ve portfÃ¶y PnL modÃ¼lÃ¼ eklenebilir. """ )

