import streamlit as st
import pandas as pd
import yfinance as yf
from datetime import date, timedelta
import requests

def parse_tickers(raw: str):
    parts = [p.strip().upper() for p in raw.replace("\n", ",").replace(";", ",").split(",")]
    return [p for p in parts if p]

def yahoo_finance_symbol_search(company_name: str):
    url = f"https://query2.finance.yahoo.com/v1/finance/search?q={company_name}"
    try:
        resp = requests.get(url, timeout=7)
        data = resp.json()
        # SonuÃ§lardan uygun olan ilk sembolÃ¼ bul
        for item in data.get("quotes", []):
            # EÄŸer hisse ise (Ã¶r: equity), sembolÃ¼ dÃ¶ndÃ¼r
            if item.get("quoteType") in ["EQUITY", "ETF"]:
                return item.get("symbol")
        return None
    except Exception as e:
        return None

@st.cache_data(ttl=3600)
def fetch_monthly_data(ticker, start_dt, end_dt):
    df = yf.download(ticker, start=start_dt, end=end_dt + timedelta(days=1), interval="1mo", progress=False)
    if not df.empty:
        df.index = pd.to_datetime(df.index)
        df = df.rename(columns={"Close": "KapanÄ±ÅŸ"})
        df = df[["KapanÄ±ÅŸ"]]
    return df

def calc_monthly_changes(df):
    if df.empty or len(df) < 2:
        return pd.DataFrame()
    df = df.sort_index()
    df["Ay"] = df.index.strftime("%Y-%m")
    df["AylÄ±k DeÄŸiÅŸim (%)"] = df["KapanÄ±ÅŸ"].pct_change().multiply(100).round(2)
    return df[["Ay", "KapanÄ±ÅŸ", "AylÄ±k DeÄŸiÅŸim (%)"]].dropna()

st.set_page_config(page_title="AylÄ±k Getiri", page_icon="ğŸ“ˆ", layout="wide")
st.title("ğŸ“ˆ Hisse Senedi AylÄ±k Getiri Takibi")

with st.sidebar:
    st.subheader("Sembol ile sorgu")
    # Otomatik eklenen semboller burada tutulur
    if "auto_tickers" not in st.session_state:
        st.session_state.auto_tickers = []
    auto_tickers = st.session_state.auto_tickers

    tickers_str = st.text_area("Ä°zlenecek Semboller (manuel veya otomatik eklenir)", value=", ".join(auto_tickers), height=80)
    st.markdown("---")
    st.subheader("Firma isminden sembol bul ve ekle")
    company_names_raw = st.text_area("Firma adlarÄ± (Ã¶r: TÃ¼rk Hava YollarÄ±, Apple)\nBirden fazla firma iÃ§in: satÄ±r baÅŸÄ± veya virgÃ¼l ile ayÄ±rabilirsiniz.")
    ekle = st.button("EKLE")
    if ekle and company_names_raw:
        names = [n.strip() for n in company_names_raw.replace("\n", ",").split(",") if n.strip()]
        eklenenler = []
        bulunamayanlar = []
        for name in names:
            symbol = yahoo_finance_symbol_search(name)
            if symbol:
                eklenenler.append(f"{name} â†’ {symbol}")
                # Sembol zaten listede yoksa ekle
                if symbol not in auto_tickers:
                    auto_tickers.append(symbol)
            else:
                bulunamayanlar.append(name)
        if eklenenler:
            st.success("Eklenenler:\n" + "\n".join(eklenenler))
        if bulunamayanlar:
            st.warning("Sembol bulunamayanlar:\n" + ", ".join(bulunamayanlar))
        # TextArea'yÄ± gÃ¼ncelle
        st.session_state.auto_tickers = auto_tickers
    st.markdown("---")
    start_dt = st.date_input("BaÅŸlangÄ±Ã§", value=date.today() - timedelta(days=365))
    end_dt = st.date_input("BitiÅŸ", value=date.today())
    run = st.button("Verileri Getir", type="primary")

# Son sembol listesini hazÄ±rla
tickers = parse_tickers(", ".join(st.session_state.get("auto_tickers", [])))
if tickers_str:
    # Manuel eklemeden gelenleri de ekle
    tickers += [t for t in parse_tickers(tickers_str) if t not in tickers]
tickers = list(dict.fromkeys(tickers)) # TekrarlarÄ± sil

if not tickers:
    st.info("LÃ¼tfen en az bir sembol girin veya firma adÄ± ile ekleyin.")
    st.stop()

if run:
    if start_dt >= end_dt:
        st.error("BaÅŸlangÄ±Ã§ tarihi bitiÅŸ tarihinden Ã¶nce olmalÄ±!")
        st.stop()

    st.subheader("SonuÃ§lar")
    for t in tickers[:5]:
        st.markdown(f"### {t}")
        try:
            df = fetch_monthly_data(t, start_dt, end_dt)
            changes = calc_monthly_changes(df)
            if not changes.empty:
                st.dataframe(changes, use_container_width=True)
            else:
                st.info("Yeterli veri yok, lÃ¼tfen tarih aralÄ±ÄŸÄ±nÄ± geniÅŸletin veya baÅŸka sembol deneyin.")
        except Exception as e:
            st.error(f"Veri Ã§ekme hatasÄ±: {e}")

st.caption("Veriler Yahoo Finance'dan aylÄ±k olarak Ã§ekilir. Sadece kapanÄ±ÅŸ fiyatÄ± ve aylÄ±k deÄŸiÅŸim yÃ¼zdesi gÃ¶sterilir.\nFirma adÄ±na gÃ¶re sembol bulmak iÃ§in Ã¼stteki alanÄ± kullanabilirsiniz. Sembol bulma iÅŸlemi Yahoo Finance arama API'si ile yapÄ±lÄ±r.")
